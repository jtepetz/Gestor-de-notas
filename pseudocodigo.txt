INICIO
    // Inicialización de estructuras de datos (Listas)
    Cursos = []   // Lista para nombres de cursos
    Notas = []    // Lista para notas asociadas
    Opcion = 0

    // Bucle principal: Mantiene el menú activo (Avance 1)
    MIENTRAS Opcion != 6 HACER // Ahora el menú sale con la opción 6
        IMPRIMIR "--- Gestor de Notas Académicas ---"
        IMPRIMIR "1. Registrar nuevo curso y nota" 
        IMPRIMIR "2. Mostrar todas las notas"       
        IMPRIMIR "3. Calcular promedio general"     
        IMPRIMIR "4. Actualizar nota de curso"      // Avance 3: Búsqueda y Actualización
        IMPRIMIR "5. Eliminar curso"                // NUEVA OPCIÓN (Avance 4)
        IMPRIMIR "6. Salir"
        IMPRIMIR "-----------------------------------"
        LEER Opcion

        // Condicionales para cada opción
        SI Opcion ES 1 ENTONCES
            LLAMAR Subrutina_Registrar_Nota(Cursos, Notas)
        SINO_SI Opcion ES 2 ENTONCES
            LLAMAR Subrutina_Mostrar_Notas(Cursos, Notas)
        SINO_SI Opcion ES 3 ENTONCES
            LLAMAR Subrutina_Calcular_Promedio(Notas)
        SINO_SI Opcion ES 4 ENTONCES
            LLAMAR Subrutina_Actualizar_Nota(Cursos, Notas) // Lógica de Avance 3
        SINO_SI Opcion ES 5 ENTONCES
            LLAMAR Subrutina_Eliminar_Curso(Cursos, Notas)  // Lógica de Avance 4
        SINO_SI Opcion ES 6 ENTONCES
            IMPRIMIR "Saliendo del sistema..."
        SINO
            IMPRIMIR "Opción no válida."
        FIN_SI
    FIN_MIENTRAS

// --------------------------------------------------------------------
// DEFINICIÓN DE SUBRUTINAS (Funciones y Modularización - Avance 4)
// --------------------------------------------------------------------

// SUBRUTINA DE REGISTRO (Avance 2)
SUBRUTINA Subrutina_Registrar_Nota(ListaCursos, ListaNotas)
    IMPRIMIR "Ingrese el nombre del curso:"
    LEER NombreCurso
    IMPRIMIR "Ingrese la nota (0-100):"
    LEER NuevaNota
    
    SI NuevaNota ES MAYOR O IGUAL QUE 0 Y NuevaNota ES MENOR O IGUAL QUE 100 ENTONCES
        AGREGAR(ListaCursos, NombreCurso)
        AGREGAR(ListaNotas, NuevaNota)
        IMPRIMIR "Curso registrado exitosamente."
    SINO
        IMPRIMIR "Error: La nota ingresada no es válida."
    FIN_SI
FIN_SUBRUTINA


// SUBRUTINA DE ACTUALIZACIÓN (Avance 3: Búsqueda Lineal y Actualización)
SUBRUTINA Subrutina_Actualizar_Nota(ListaCursos, ListaNotas)
    IMPRIMIR "Ingrese el nombre del curso a actualizar:"
    LEER NombreABuscar

    Encontrado = FALSO
    i = 0 

    MIENTRAS i < TAMAÑO(ListaCursos) HACER
        SI ListaCursos[i] ES IGUAL A NombreABuscar ENTONCES
            Encontrado = VERDADERO
            
            IMPRIMIR "Curso encontrado. Nota actual: ", ListaNotas[i]
            IMPRIMIR "Ingrese la nueva nota (0-100):"
            LEER NuevaNota
            
            SI NuevaNota ES MAYOR O IGUAL QUE 0 Y NuevaNota ES MENOR O IGUAL QUE 100 ENTONCES
                ListaNotas[i] = NuevaNota // Actualización
                IMPRIMIR "Nota de ", NombreABuscar, " actualizada exitosamente."
            SINO
                IMPRIMIR "Error: La nota ingresada no es válida."
            FIN_SI
            ROMPER MIENTRAS 
        FIN_SI
        i = i + 1 
    FIN_MIENTRAS

    SI Encontrado ES FALSO ENTONCES
        IMPRIMIR "Error: El curso '", NombreABuscar, "' no fue encontrado."
    FIN_SI
FIN_SUBRUTINA


// SUBRUTINA DE ELIMINACIÓN (Avance 4: Eliminación de datos)
SUBRUTINA Subrutina_Eliminar_Curso(ListaCursos, ListaNotas)
    IMPRIMIR "Ingrese el nombre del curso a eliminar:"
    LEER NombreAEliminar

    Encontrado = FALSO
    i = 0 

    // Búsqueda Lineal (similar a la actualización)
    MIENTRAS i < TAMAÑO(ListaCursos) HACER
        SI ListaCursos[i] ES IGUAL A NombreAEliminar ENTONCES
            Encontrado = VERDADERO
            
            // Eliminación del elemento de ambas listas en la misma posición
            ELIMINAR_ELEMENTO(ListaCursos, i) 
            ELIMINAR_ELEMENTO(ListaNotas, i) 
            
            IMPRIMIR "El curso '", NombreAEliminar, "' ha sido eliminado exitosamente."
            ROMPER MIENTRAS 
        FIN_SI
        i = i + 1 
    FIN_MIENTRAS

    SI Encontrado ES FALSO ENTONCES
        IMPRIMIR "Error: El curso '", NombreAEliminar, "' no fue encontrado."
    FIN_SI
FIN_SUBRUTINA


// SUBRUTINA DE PROMEDIO (Avance 2)
SUBRUTINA Subrutina_Calcular_Promedio(ListaNotas)
    SI TAMAÑO(ListaNotas) ES 0 ENTONCES
        IMPRIMIR "No hay notas para calcular promedio."
        RETORNAR
    FIN_SI
    
    Suma = 0
    Contador = 0 
    
    PARA i DESDE 0 HASTA TAMAÑO(ListaNotas) - 1 HACER
        Suma = Suma + ListaNotas[i]
        Contador = Contador + 1
    FIN_PARA
    
    Promedio = Suma / Contador
    IMPRIMIR "El promedio general es: ", Promedio
FIN_SUBRUTINA


// SUBRUTINA DE MOSTRAR NOTAS (Avance 2)
SUBRUTINA Subrutina_Mostrar_Notas(ListaCursos, ListaNotas)
    SI TAMAÑO(ListaCursos) ES 0 ENTONCES
        IMPRIMIR "No hay cursos registrados."
        RETORNAR
    FIN_SI
    
    PARA i DESDE 0 HASTA TAMAÑO(ListaCursos) - 1 HACER
        IMPRIMIR "Curso: ", ListaCursos[i], ", Nota: ", ListaNotas[i]
    FIN_PARA
FIN_SUBRUTINA

FIN
