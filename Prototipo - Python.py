# ============================================================
# GESTOR DE NOTAS ACAD√âMICAS - Versi√≥n Final
# Autor: Joshua JC
# Fecha: Octubre 2025
# Descripci√≥n: Sistema en consola para registrar, gestionar y analizar notas acad√©micas.
# ============================================================

# ---------------------------
# VARIABLES GLOBALES
# ---------------------------
cursos = []  # Lista principal de cursos (cada curso ser√° un diccionario con 'nombre' y 'nota')
historial_cambios = []  # Pila para registrar eliminaciones o actualizaciones
cola_revision = []  # Cola para simular solicitudes de revisi√≥n

# ---------------------------
# FUNCIONES PRINCIPALES
# ---------------------------

def registrar_curso():
    """Permite registrar un curso y su nota, validando los datos."""
    nombre = input("Ingrese el nombre del curso: ").strip()
    if not nombre:
        print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
        return

    # Evitar duplicados
    for curso in cursos:
        if curso["nombre"].lower() == nombre.lower():
            print("‚ö†Ô∏è El curso ya est√° registrado.")
            return

    try:
        nota = float(input("Ingrese la nota obtenida (0-100): "))
        if nota < 0 or nota > 100:
            print("‚ö†Ô∏è La nota debe estar entre 0 y 100.")
            return
    except ValueError:
        print("‚ö†Ô∏è Ingrese un valor num√©rico v√°lido.")
        return

    cursos.append({"nombre": nombre, "nota": nota})
    print(f"‚úÖ Curso '{nombre}' registrado con √©xito.")


def mostrar_cursos():
    """Muestra todos los cursos registrados."""
    if not cursos:
        print("üì≠ No hay cursos registrados.")
        return

    print("\nüìö Cursos registrados:")
    for i, curso in enumerate(cursos, 1):
        print(f"{i}. {curso['nombre']} - Nota: {curso['nota']}")


def calcular_promedio():
    """Calcula y muestra el promedio general de las notas."""
    if not cursos:
        print("‚ö†Ô∏è No hay cursos registrados para calcular el promedio.")
        return

    promedio = sum(c["nota"] for c in cursos) / len(cursos)
    print(f"üìä Promedio general: {promedio:.2f}")


def contar_aprobados_reprobados():
    """Cuenta cu√°ntos cursos est√°n aprobados (>=60) y reprobados."""
    if not cursos:
        print("‚ö†Ô∏è No hay cursos registrados.")
        return

    aprobados = sum(1 for c in cursos if c["nota"] >= 60)
    reprobados = len(cursos) - aprobados
    print(f"‚úÖ Cursos aprobados: {aprobados}")
    print(f"‚ùå Cursos reprobados: {reprobados}")


def buscar_curso_lineal(nombre):
    """Realiza b√∫squeda lineal de un curso por nombre."""
    for curso in cursos:
        if nombre.lower() in curso["nombre"].lower():
            print(f"üîé Curso encontrado: {curso['nombre']} - Nota: {curso['nota']}")
            return
    print("‚ö†Ô∏è No se encontr√≥ el curso.")


def actualizar_nota():
    """Permite actualizar la nota de un curso existente."""
    nombre = input("Ingrese el nombre del curso a actualizar: ").strip()
    for curso in cursos:
        if curso["nombre"].lower() == nombre.lower():
            try:
                nueva_nota = float(input("Ingrese la nueva nota (0-100): "))
                if nueva_nota < 0 or nueva_nota > 100:
                    print("‚ö†Ô∏è La nota debe estar entre 0 y 100.")
                    return
            except ValueError:
                print("‚ö†Ô∏è Ingrese un n√∫mero v√°lido.")
                return

            historial_cambios.append(f"Se actualiz√≥: {curso['nombre']} - Nota anterior: {curso['nota']} ‚Üí Nueva nota: {nueva_nota}")
            curso["nota"] = nueva_nota
            print("‚úÖ Nota actualizada correctamente.")
            return

    print("‚ö†Ô∏è No se encontr√≥ el curso.")


def eliminar_curso():
    """Elimina un curso de la lista, con confirmaci√≥n."""
    nombre = input("Ingrese el nombre del curso a eliminar: ").strip()
    for curso in cursos:
        if curso["nombre"].lower() == nombre.lower():
            confirm = input(f"¬øEst√° seguro de eliminar '{nombre}'? (s/n): ").lower()
            if confirm == "s":
                historial_cambios.append(f"Se elimin√≥: {curso['nombre']} - Nota: {curso['nota']}")
                cursos.remove(curso)
                print("üóëÔ∏è Curso eliminado correctamente.")
            else:
                print("‚ùé Operaci√≥n cancelada.")
            return
    print("‚ö†Ô∏è No se encontr√≥ el curso.")


def ordenar_por_nota():
    """Ordena los cursos por nota (descendente) usando el m√©todo burbuja."""
    n = len(cursos)
    for i in range(n - 1):
        for j in range(n - i - 1):
            if cursos[j]["nota"] < cursos[j + 1]["nota"]:
                cursos[j], cursos[j + 1] = cursos[j + 1], cursos[j]
    print("üìà Cursos ordenados por nota (descendente):")
    mostrar_cursos()


def ordenar_por_nombre():
    """Ordena los cursos alfab√©ticamente por nombre usando inserci√≥n."""
    for i in range(1, len(cursos)):
        actual = cursos[i]
        j = i - 1
        while j >= 0 and cursos[j]["nombre"].lower() > actual["nombre"].lower():
            cursos[j + 1] = cursos[j]
            j -= 1
        cursos[j + 1] = actual
    print("üî§ Cursos ordenados alfab√©ticamente:")
    mostrar_cursos()


def buscar_curso_binaria(nombre):
    """Realiza b√∫squeda binaria en la lista ordenada por nombre."""
    if not cursos:
        print("‚ö†Ô∏è No hay cursos registrados.")
        return

    # Asegurar que la lista est√© ordenada por nombre
    ordenar_por_nombre()

    inicio, fin = 0, len(cursos) - 1
    nombre = nombre.lower()

    while inicio <= fin:
        medio = (inicio + fin) // 2
        actual = cursos[medio]["nombre"].lower()

        if actual == nombre:
            print(f"üîç Curso encontrado: {cursos[medio]['nombre']} - Nota: {cursos[medio]['nota']}")
            return
        elif actual < nombre:
            inicio = medio + 1
        else:
            fin = medio - 1

    print("‚ö†Ô∏è Curso no encontrado.")


def simular_cola_revision():
    """Simula una cola de solicitudes de revisi√≥n."""
    print("Ingrese los cursos a enviar a revisi√≥n (escriba 'fin' para terminar):")
    while True:
        curso = input("> ").strip()
        if curso.lower() == "fin":
            break
        cola_revision.append(curso)

    if not cola_revision:
        print("‚ö†Ô∏è No se agregaron solicitudes de revisi√≥n.")
        return

    print("\nProcesando solicitudes de revisi√≥n:")
    while cola_revision:
        curso = cola_revision.pop(0)  # FIFO
        print(f"üîÅ Revisando: {curso}")
    print("‚úÖ Todas las solicitudes fueron procesadas.")


def mostrar_historial():
    """Muestra los √∫ltimos cambios realizados (pila LIFO)."""
    if not historial_cambios:
        print("üì≠ No hay historial de cambios.")
        return

    print("üïò Historial de cambios recientes:")
    for i, cambio in enumerate(reversed(historial_cambios), 1):
        print(f"{i}. {cambio}")


# ---------------------------
# MEN√ö PRINCIPAL
# ---------------------------
def menu():
    while True:
        print("\n====== GESTOR DE NOTAS ACAD√âMICAS ======")
        print("1. Registrar nuevo curso")
        print("2. Mostrar todos los cursos y notas")
        print("3. Calcular promedio general")
        print("4. Contar cursos aprobados y reprobados")
        print("5. Buscar curso por nombre (b√∫squeda lineal)")
        print("6. Actualizar nota de un curso")
        print("7. Eliminar un curso")
        print("8. Ordenar cursos por nota (burbuja)")
        print("9. Ordenar cursos por nombre (inserci√≥n)")
        print("10. Buscar curso por nombre (b√∫squeda binaria)")
        print("11. Simular cola de solicitudes de revisi√≥n")
        print("12. Mostrar historial de cambios (pila)")
        print("13. Salir")

        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1": registrar_curso()
        elif opcion == "2": mostrar_cursos()
        elif opcion == "3": calcular_promedio()
        elif opcion == "4": contar_aprobados_reprobados()
        elif opcion == "5": buscar_curso_lineal(input("Ingrese el nombre del curso: "))
        elif opcion == "6": actualizar_nota()
        elif opcion == "7": eliminar_curso()
        elif opcion == "8": ordenar_por_nota()
        elif opcion == "9": ordenar_por_nombre()
        elif opcion == "10": buscar_curso_binaria(input("Ingrese el nombre del curso a buscar: "))
        elif opcion == "11": simular_cola_revision()
        elif opcion == "12": mostrar_historial()
        elif opcion == "13":
            print("üëã Gracias por usar el Gestor de Notas Acad√©micas. ¬°Hasta pronto!")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n no v√°lida. Intente nuevamente.")


# ---------------------------
# PROGRAMA PRINCIPAL
# ---------------------------
if __name__ == "__main__":
    menu()

